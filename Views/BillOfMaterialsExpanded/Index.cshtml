@using System.Collections
@model IEnumerable<MVC_Test.Models.BillOfMaterialsExpanded>


@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_DevExtremeLayout.cshtml";
}

<h2>Index</h2>

@(Html.DevExtreme().TreeList<MVC_Test.Models.BillOfMaterialsExpanded>
    ()
    .DataSource(ds => ds.Mvc()
    .Controller("BillOfMaterialsExpanded")
    .LoadAction("Get")
    .InsertAction("Post")
    .UpdateAction("Put")
    .DeleteAction("Delete")
    .Key("FullSequence")
    )
    //.DataStructure(TreeListDataStructure.Plain)
    .RemoteOperations(o => o.Filtering(true).Grouping(true).Sorting(true))
    .KeyExpr("FullSequence")
    .ParentIdExpr("ParentId")
    //.HasItemsExpr("HasChild")
    .RootValue(-1)
    .SearchPanel(searchPanel => searchPanel.Visible(true))
    .HeaderFilter(headerFilter => headerFilter.Visible(true))
    .Selection(s => s
        .Mode(SelectionMode.Multiple)
        .Recursive(true)
    )
    .Columns(columns =>
    {

        columns.AddFor(m => m.Bomlevel);
        columns.AddFor(m => m.TopLevelItem).FilterValue("006800422.1.6PR");
        columns.AddFor(m => m.TopLevelDescription);
        columns.AddFor(m => m.ParentItem);
        columns.AddFor(m => m.ParentDescription);
        columns.AddFor(m => m.ComponentItem);
        columns.AddFor(m => m.ComponentDescription);
        columns.AddFor(m => m.QuantityPerTop);
        columns.AddFor(m => m.QuantityPerParent);
        columns.AddFor(m => m.PurchasedOrManufactured);
        columns.AddFor(m => m.ScrapPercentage);
        columns.AddFor(m => m.BomSequence);
        columns.AddFor(m => m.FullSequence);
        //columns.AddFor(m => m.HasChild);
        columns.AddFor(m => m.StandardCost);
        columns.AddFor(m => m.LineCost);
        columns.AddFor(m => m.ManufacturerCodes);
        columns.AddFor(m => m.BomDate);
        columns.AddFor(m => m.Bomreference);
        columns.AddFor(m => m.Bomrelease);
    })
    .RowAlternationEnabled(true)
    .FocusedRowEnabled(true)
    .ShowRowLines(true)
    .ColumnAutoWidth(true)
    ////.ExpandedRowKeys(new[] { 0 })
    //.AutoExpandAll(false)
    .ShowBorders(true)
    .Scrolling(scrolling => scrolling.Mode(TreeListScrollingMode.Standard))
    .Paging(paging =>
    {
        paging.Enabled(true);
        paging.PageSize(30);
    })
    .Pager(pager =>
    {
        pager.ShowPageSizeSelector(true);
        pager.AllowedPageSizes(new[] { 5, 10, 30 });
        pager.ShowInfo(true);
    })

    .Editing(e => e
    .AllowAdding(true)
    .AllowUpdating(true)
    .AllowDeleting(true)
    )
    )
