@*@model IEnumerable<MVC_Test.Models.BillOfMaterialsExpanded>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_DevExtremeLayout.cshtml";
}

<div class="container-fluid">

    <h2>Bill Of Materials Expanded Tree List</h2>

    @(Html.DevExtreme().TreeList<MVC_Test.Models.BillOfMaterialsExpanded>()
        .DataSource(ds => ds.Mvc()
            .Controller("BillOfMaterialsExpanded")
            .LoadAction("Get")
            .InsertAction("Post")
            .UpdateAction("Put")
            .DeleteAction("Delete")
            .Key("BillOfMaterialsExpandedId")
        )
        .DataStructure(TreeListDataStructure.Plain)
        .RootValue("MA/96021901.24")
        .ParentIdExpr("ParentId")
        .KeyExpr("FullSequence")
        .RemoteOperations(o => o.Filtering(true).Grouping(true).Sorting(true))
        .Selection(s => s
            .Mode(SelectionMode.Multiple)
            .Recursive(true)
        )
        .Columns(columns =>
        {

            columns.AddFor(m => m.BomLevel);

            columns.AddFor(m => m.TopLevelItem);

            columns.AddFor(m => m.TopLevelDescription);

            columns.AddFor(m => m.ParentItem);

            columns.AddFor(m => m.ParentDescription);

            columns.AddFor(m => m.ComponentItem);

            columns.AddFor(m => m.ComponentDescription);

            columns.AddFor(m => m.QuantityPerTop);

            columns.AddFor(m => m.QuantityPerParent);

            columns.AddFor(m => m.PurchasedOrManufactured);

            columns.AddFor(m => m.ScrapPercentage);

            columns.AddFor(m => m.BomSequence);

            columns.AddFor(m => m.FullSequence);

            columns.AddFor(m => m.ParentId);

            columns.AddFor(m => m.HasChild);

            columns.AddFor(m => m.StandardCost);

            columns.AddFor(m => m.LineCost);

            columns.AddFor(m => m.ManufacturerCodes);

            columns.AddFor(m => m.BomDate);

            columns.AddFor(m => m.BomReference);

            columns.AddFor(m => m.BomRelease);
        })
        .AutoExpandAll(true)
        .ColumnAutoWidth(true)
        .ShowBorders(true)
        .Scrolling(scrolling => scrolling.Mode(TreeListScrollingMode.Standard))
        .Paging(paging =>
        {
            paging.Enabled(true);
            paging.PageSize(10);
        })
        .Pager(pager =>
        {
            pager.ShowPageSizeSelector(true);
            pager.AllowedPageSizes(new[] {5, 10, 30});
            pager.ShowInfo(true);
        })
        .Editing(e => e
            .AllowAdding(true)
            .AllowUpdating(true)
            .AllowDeleting(true)))

</div>*@